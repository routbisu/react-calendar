{"version":3,"sources":["services/commonService.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["monthsDict","weekDays","getLastDate","year","month","Date","getDate","Calendar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentMonth","currentYear","dates","showNext","bind","assertThisInitialized","showPrev","currFullDate","currYear","getFullYear","currMonth","getMonth","currDate","lastDate","allDates","pointerDate","lastDateLastMonth","firstDateDayCurrentMonth","date","getDayNumber","arguments","length","undefined","dayNumber","getDay","getDayFromDate","firstWeek","i","push","isOverflow","parseInt","isCurrentDate","week","overFlowLastWeekDate","setState","currentDate","currrentYear","props","match","params","generateDatesForMonth","history","concat","stateMonth","stateYear","evt","selectedYear","target","value","selectedMonth","monthNumber","yearsDropdownJSX","react_default","a","createElement","key","className","onChange","changeYear","changeMonth","map","item","onClick","showCurrentMonth","react_fontawesome_index_es","icon","j","classNames","sunday","br-1","overflow","current-date","Component","library","add","faChevronCircleRight","faChevronCircleLeft","faCalendarAlt","App","BrowserRouter","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a472cf.chunk.js","sourcesContent":["export const monthsDict = [\n  \"January\",\n  \"Feburary\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n/**\n * Get Month name from month number\n * @param {number} monthNumber Month number where 1 is January & 12 in December\n */\nexport const getMonthName = monthNumber => {\n  return monthsDict[monthNumber - 1];\n};\n\n/**\n * Get last date of a month\n * @param {number} year\n * @param {number} month\n */\nexport const getLastDate = (year, month) => {\n  const date = new Date(year, month, 0);\n  return date.getDate();\n};\n\n/**\n * Get day from date\n * @param {number} year Year\n * @param {number} month Month number\n * @param {number} date Date\n */\nexport const getDayFromDate = (year, month, date, getDayNumber = false) => {\n  const currentDate = new Date(year, month, date);\n  const dayNumber = currentDate.getDay();\n  return getDayNumber ? dayNumber : weekDays[dayNumber];\n};\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Calendar.scss\";\nimport {\n  getMonthName,\n  getLastDate,\n  getDayFromDate,\n  weekDays,\n  monthsDict\n} from \"../services/commonService\";\nimport classNames from \"classnames\";\n\nexport default class Calendar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentMonth: 1,\n      currentYear: 1970,\n      dates: []\n    };\n    this.showNext = this.showNext.bind(this);\n    this.showPrev = this.showPrev.bind(this);\n  }\n\n  generateDatesForMonth(currentMonth, currentYear) {\n    // Get current date\n    const currFullDate = new Date();\n    const currYear = currFullDate.getFullYear();\n    const currMonth = currFullDate.getMonth() + 1;\n    const currDate = currFullDate.getDate();\n\n    // Last date of the month\n    const lastDate = getLastDate(currentYear, currentMonth);\n\n    let allDates = [];\n    let pointerDate = 1;\n\n    const year = currentMonth > 1 ? currentYear : currentYear - 1;\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const lastDateLastMonth = getLastDate(year, month);\n\n    // First overflow week\n    const firstDateDayCurrentMonth = getDayFromDate(year, month, 1, true);\n    const firstDateOfCalendar =\n      lastDateLastMonth - firstDateDayCurrentMonth + 1;\n    let firstWeek = [];\n\n    for (let i = firstDateOfCalendar; i <= lastDateLastMonth; i++) {\n      firstWeek.push({ date: i, isOverflow: true });\n    }\n\n    if (firstDateDayCurrentMonth <= 6) {\n      for (let i = 1; i < 7 - firstDateDayCurrentMonth + 1; i++) {\n        if (\n          parseInt(currYear) === parseInt(currentYear) &&\n          parseInt(currMonth) === parseInt(currentMonth) &&\n          parseInt(currDate) === parseInt(i)\n        ) {\n          firstWeek.push({ date: i, isCurrentDate: true });\n        } else {\n          firstWeek.push({ date: i });\n        }\n        pointerDate = i + 1;\n      }\n    }\n\n    allDates.push(firstWeek);\n\n    // Generate dates for the next few weeks\n    while (pointerDate <= lastDate) {\n      let week = [];\n      let overFlowLastWeekDate = 1;\n      for (let i = 0; i < 7; i++) {\n        if (pointerDate <= lastDate) {\n          if (\n            parseInt(currYear) === parseInt(currentYear) &&\n            parseInt(currMonth) === parseInt(currentMonth) &&\n            parseInt(currDate) === parseInt(pointerDate)\n          ) {\n            week.push({ date: pointerDate++, isCurrentDate: true });\n          } else {\n            week.push({ date: pointerDate++ });\n          }\n        } else {\n          week.push({ date: overFlowLastWeekDate++, isOverflow: true });\n        }\n      }\n      allDates.push(week);\n    }\n\n    // Set date is state\n    this.setState({ dates: allDates });\n  }\n\n  componentDidMount() {\n    // Get current year and month\n    const currentDate = new Date();\n    let currrentYear = currentDate.getFullYear();\n    let currentMonth = currentDate.getMonth() + 1;\n\n    // Get month and year from url params if present\n    if (this.props.match && this.props.match.params) {\n      if (this.props.match.params.year && this.props.match.params.month) {\n        // Find last date of the month\n        currrentYear = this.props.match.params.year;\n        currentMonth = this.props.match.params.month;\n      }\n    }\n\n    this.setState({\n      currentMonth: currentMonth,\n      currentYear: currrentYear\n    });\n\n    this.generateDatesForMonth(currentMonth, currrentYear);\n    this.props.history.push(`/${currrentYear}/${currentMonth}`);\n  }\n\n  /**\n   * Show next month\n   */\n  showNext() {\n    const stateMonth = parseInt(this.state.currentMonth);\n    const stateYear = parseInt(this.state.currentYear);\n    const currMonth = stateMonth < 12 ? stateMonth + 1 : 1;\n    const currYear = stateMonth < 12 ? stateYear : stateYear + 1;\n    this.props.history.push(`/${currYear}/${currMonth}`);\n    this.setState({\n      currentMonth: currMonth,\n      currentYear: currYear\n    });\n    this.generateDatesForMonth(currMonth, currYear);\n  }\n\n  /**\n   * Show previous month\n   */\n  showPrev() {\n    const stateMonth = parseInt(this.state.currentMonth);\n    const stateYear = parseInt(this.state.currentYear);\n    const currMonth = stateMonth > 1 ? stateMonth - 1 : 12;\n    const currYear = stateMonth > 1 ? stateYear : stateYear - 1;\n    this.props.history.push(`/${currYear}/${currMonth}`);\n    this.setState({\n      currentMonth: currMonth,\n      currentYear: currYear\n    });\n    this.generateDatesForMonth(currMonth, currYear);\n  }\n\n  showCurrentMonth() {\n    const currentDate = new Date();\n    const currYear = currentDate.getFullYear();\n    const currMonth = currentDate.getMonth() + 1;\n\n    this.props.history.push(`/${currYear}/${currMonth}`);\n    this.setState({\n      currentMonth: currMonth,\n      currentYear: currYear\n    });\n    this.generateDatesForMonth(currMonth, currYear);\n  }\n\n  /**\n   * Change year from dropdown\n   * @param {any} evt\n   */\n  changeYear(evt) {\n    const selectedYear = evt.target.value;\n    this.setState({ currentYear: selectedYear });\n    this.generateDatesForMonth(this.state.currentMonth, selectedYear);\n    this.props.history.push(`/${selectedYear}/${this.state.currentMonth}`);\n  }\n\n  /**\n   * Change year from dropdown\n   * @param {any} evt\n   */\n  changeMonth(evt) {\n    const selectedMonth = evt.target.value;\n    this.setState({ currentMonth: selectedMonth });\n    this.generateDatesForMonth(selectedMonth, this.state.currentYear);\n    this.props.history.push(`/${this.state.currentYear}/${selectedMonth}`);\n  }\n\n  render() {\n    let yearsDropdownJSX = [];\n    for (let i = 1990; i < 2031; i++) {\n      yearsDropdownJSX.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    return (\n      <div className=\"calendar\">\n        <div className=\"calendar-header\">\n          <div className=\"month-name\">\n            {getMonthName(this.state.currentMonth)} {this.state.currentYear}\n          </div>\n          <div className=\"calendar-controls\">\n            <select\n              className=\"date-selector\"\n              onChange={this.changeYear.bind(this)}\n              value={this.state.currentYear}\n            >\n              {yearsDropdownJSX}\n            </select>\n            <select\n              className=\"date-selector\"\n              onChange={this.changeMonth.bind(this)}\n              value={this.state.currentMonth}\n            >\n              {monthsDict.map((item, i) => (\n                <option value={i + 1} key={i}>\n                  {item}\n                </option>\n              ))}\n            </select>\n            <button\n              className=\"btn-month-nav\"\n              onClick={this.showCurrentMonth.bind(this)}\n            >\n              Current Month\n              <FontAwesomeIcon icon=\"calendar-alt\" className=\"fa-icon\" />\n            </button>\n            <button className=\"btn-month-nav\" onClick={this.showPrev}>\n              <FontAwesomeIcon icon=\"chevron-circle-left\" className=\"fa-icon\" />\n              Prev\n            </button>\n            <button className=\"btn-month-nav\" onClick={this.showNext}>\n              Next\n              <FontAwesomeIcon\n                icon=\"chevron-circle-right\"\n                className=\"fa-icon\"\n              />\n            </button>\n          </div>\n        </div>\n        <div className=\"calendar-body\">\n          <div className=\"days-header\">\n            {weekDays.map((item, i) => (\n              <span className=\"day-type\" key={i}>\n                {item}\n              </span>\n            ))}\n          </div>\n\n          {this.state.dates &&\n            this.state.dates.length > 0 &&\n            this.state.dates.map((week, i) => (\n              <div className=\"day-row\" key={i}>\n                {week.map((date, j) => (\n                  <span\n                    className={classNames(\n                      \"calendar-day\",\n                      { sunday: j === 0 },\n                      { \"br-1\": j === 6 },\n                      { overflow: date.isOverflow },\n                      { \"current-date\": date.isCurrentDate }\n                    )}\n                    key={j}\n                  >\n                    <span>{date.date}</span>\n                  </span>\n                ))}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faChevronCircleRight,\n  faChevronCircleLeft,\n  faCalendarAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Calendar from \"./components/Calendar\";\n\nlibrary.add(faChevronCircleRight, faChevronCircleLeft, faCalendarAlt);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/:year/:month\" component={Calendar} />\n              <Route path=\"/\" component={Calendar} />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}